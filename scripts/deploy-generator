#!/bin/bash

PROJ=ach

cd `dirname $0`
BASE=`pwd`
cd - >> /dev/null

set -e

oc new-build \
  -n $PROJ \
  --name=generator \
  -l app=generator \
  --binary \
  -i python:3.8

oc start-build \
  -n $PROJ \
  generator \
  --from-dir=${BASE}/../transactions-generator \
  --follow

echo -n "Making sure imagestream exists..."
while [ $(oc get is/generator -n $PROJ -o name 2>/dev/null | wc -l) -lt 1 ]; do
  echo -n "."
  sleep 10
done
echo "done"

cat <<EOF | oc apply -n $PROJ -f -
apiVersion: apps/v1
kind: Deployment
metadata:
  annotations:
    image.openshift.io/triggers: '[{"from":{"kind":"ImageStreamTag","name":"generator:latest","namespace":"ach"},"fieldPath":"spec.template.spec.containers[?(@.name==\"generator\")].image"}]'
  labels:
    app: generator
    app.kubernetes.io/component: generator
    app.kubernetes.io/instance: generator
  name: generator
spec:
  progressDeadlineSeconds: 600
  replicas: 1
  revisionHistoryLimit: 10
  selector:
    matchLabels:
      deployment: generator
  strategy:
    rollingUpdate:
      maxSurge: 25%
      maxUnavailable: 25%
    type: RollingUpdate
  template:
    metadata:
      annotations:
        openshift.io/generated-by: OpenShiftNewApp
      creationTimestamp: null
      labels:
        deployment: generator
    spec:
      containers:
      - env:
        - name: service_point
          valueFrom:
            secretKeyRef:
              key: service_point
              name: s3-secret
        - name: AWS_ACCESS_KEY_ID
          valueFrom:
            secretKeyRef:
              key: AWS_ACCESS_KEY_ID
              name: s3-secret
        - name: AWS_SECRET_ACCESS_KEY
          valueFrom:
            secretKeyRef:
              key: AWS_SECRET_ACCESS_KEY
              name: s3-secret
        - name: database-user
          valueFrom:
            secretKeyRef:
              key: database-user
              name: db-secret
        - name: database-password
          valueFrom:
            secretKeyRef:
              key: database-password
              name: db-secret
        - name: database-host
          valueFrom:
            secretKeyRef:
              key: database-host
              name: db-secret
        - name: database-db
          valueFrom:
            secretKeyRef:
              key: database-db
              name: db-secret
        image: ' '
        imagePullPolicy: IfNotPresent
        name: generator
        ports:
        - containerPort: 8080
          protocol: TCP
        resources: {}
        terminationMessagePath: /dev/termination-log
        terminationMessagePolicy: File
      dnsPolicy: ClusterFirst
      restartPolicy: Always
      schedulerName: default-scheduler
      securityContext: {}
      terminationGracePeriodSeconds: 30
status: {}
---
apiVersion: v1
kind: Service
metadata:
  annotations:
    openshift.io/generated-by: OpenShiftNewApp
  labels:
    app: generator
    app.kubernetes.io/component: generator
    app.kubernetes.io/instance: generator
  name: generator
spec:
  ports:
  - name: 8080-tcp
    port: 8080
    protocol: TCP
    targetPort: 8080
  selector:
    deployment: generator
  sessionAffinity: None
  type: ClusterIP
status: {}
---
apiVersion: route.openshift.io/v1
kind: Route
metadata:
  annotations:
    openshift.io/host.generated: "true"
  labels:
    app: generator
    app.kubernetes.io/component: generator
    app.kubernetes.io/instance: generator
  name: generator
spec:
  port:
    targetPort: 8080-tcp
  to:
    kind: Service
    name: generator
    weight: 100
  wildcardPolicy: None
status: {}
EOF
